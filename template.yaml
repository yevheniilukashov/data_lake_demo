AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  NAME:
    Type: String
  REGION:
    Type: String
  BRANCH:
    Type: String

Globals:
  Function:
    Timeout: 30
    CodeUri: .
    Runtime: python3.9
    Architectures:
      - arm64

Resources:
  KinesisProducer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: kinesis_producer.lambda_handler
      FunctionName: !Sub "${AWS::StackName}-kinesis-producer"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          FIREHOSE: !Ref KinesisFirehose
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:CreateLogStream"
              - "cloudwatch:CreateLogGroup"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "kms:Decrypt"
            Resource:
              - !GetAtt KMSKey.Arn
          - Effect: Allow
            Action:
              - "firehose:PutRecordBatch"
            Resource:
              - !GetAtt KinesisFirehose.Arn
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref LambdaApiGateway
  LambdaApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}"
      StageName: api
  
  FirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AWS::StackName}-firehose-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-firehose-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${LandingBucket}/*"
                  - !GetAtt LandingBucket.Arn
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                Resource: 
                  - !GetAtt KMSKey.Arn
  
  KMSKey:
    Type: AWS::KMS::Key
    Properties: 
      Enabled: true
      EnableKeyRotation: true

  KinesisFirehose:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: !Sub "${AWS::StackName}-firehose"
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt LandingBucket.Arn
        RoleARN: !GetAtt FirehoseRole.Arn
        BufferingHints:
          SizeInMBs: 128
          IntervalInSeconds: 60
        CompressionFormat: GZIP
        Prefix: !Sub '!{partitionKeyFromQuery:api}/date_dt=!{timestamp:yyyy}-!{timestamp:MM}-!{timestamp:dd}-!{timestamp:HH}/'
        ErrorOutputPrefix: 'error/'
        DynamicPartitioningConfiguration:
          Enabled: true
        ProcessingConfiguration:
          Enabled: true
          Processors:
          - Type: MetadataExtraction
            Parameters:
            - ParameterName: MetadataExtractionQuery
              ParameterValue: "{api:.api}"
            - ParameterName: JsonParsingEngine
              ParameterValue: JQ-1.6
        EncryptionConfiguration:
          KMSEncryptionConfig:
            AWSKMSKeyARN: !GetAtt KMSKey.Arn

  LandingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-landing-zone"
  
  LandingDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub "${AWS::StackName}-landing-zone"
        LocationUri: !Sub 's3://${LandingBucket}/'
  
  CleanBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-clean-zone"
  
  CleanDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub "${AWS::StackName}-clean-zone"
        LocationUri: !Sub 's3://${CleanBucket}/'
  
  CuratedBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-curated-zone"

  CuratedDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub "${AWS::StackName}-curated-zone"
        LocationUri: !Sub 's3://${CuratedBucket}/'

Outputs:
  ApiGateway:
    Value: !Sub "https://${LambdaApiGateway}.execute-api.${AWS::Region}.amazonaws.com/api/"
